// Define the rate for points to currency (ensure this matches the rate in your server-side logic)
const pointsToCurrencyRate = 20;

// JavaScript function to update the amount to pay dynamically
function updateAmountToPay() {
    // Get the number of points from the input field
    const points = parseInt(document.getElementById("pointsInput").value) || 0;

    // Calculate the amount to pay
    const amountToPay = points * pointsToCurrencyRate;

    // Update the amount to pay field
    document.getElementById("amountToPay").value = amountToPay.toFixed(2); // Limit to 2 decimal places
}

// Redirect to profile page after 5 seconds if the confirmation message is present
window.onload = function () {
    const confirmationMessage = document.getElementById("confirmationMessage");
    if (confirmationMessage) {
        setTimeout(function () {
            window.location.href = "/Customer/Profile"; // Direct URL to the Profile page
        }, 5000); // 5000 milliseconds = 5 seconds
    }
};

    document.addEventListener("DOMContentLoaded", function () {
        const productId = @Html.Raw(ViewBag.ProductId); // Get ProductId from ViewBag

    // Call this function when the document is ready or as needed
    loadRecipeSteps(productId); // Load steps based on the product ID

    // Add to Cart functionality
    document.querySelectorAll('.add-to-cart-original').forEach(function (button) {
        button.addEventListener('click', function () {
            addToCart(productId, 1); // Use productId from ViewBag
            const originalAddToCartDiv = this.closest('.Original-add-tocart');
            const plusminusDiv = originalAddToCartDiv.nextElementSibling;
            originalAddToCartDiv.style.display = "none";
            plusminusDiv.style.display = "flex";
        });
        });

    // Increment quantity
    document.querySelectorAll('.add-to-cart-plus').forEach(function (button) {
        button.addEventListener('click', function () {
            addToCart(productId, 1); // Use productId from ViewBag
        });
        });

    // Decrement quantity
    document.querySelectorAll('.remove-from-cart').forEach(function (button) {
        button.addEventListener('click', function () {
            removeFromCart(productId, 1); // Use productId from ViewBag
        });
        });
    });

    // Function to load recipe steps
    function loadRecipeSteps(productId) {
        $.get('@Url.Action("GetRecipeSteps", "Store")', { productId: productId }, function (data) {
            $('#recipe-steps-container').html(data); // Assuming there's a div with this ID in your main view
        });
    }

    // Function to add item to cart
    function addToCart(productId, quantity) {
        fetch('/Cart/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({
                productId: productId,
                quantity: quantity
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
                    quantityDisplay.textContent = parseInt(quantityDisplay.textContent) + quantity;
                } else {
                    window.location.href = data.redirectUrl;
                }
            });
    }

    // Function to remove item from cart
    function removeFromCart(productId, quantity) {
        fetch('/Cart/RemoveFromCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams({
                productId: productId,
                quantity: quantity
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
                    const currentQuantity = parseInt(quantityDisplay.textContent);
                    if (currentQuantity - quantity > 0) {
                        quantityDisplay.textContent = currentQuantity - quantity;
                    } else {
                        // If quantity is 0 or less, hide or disable the plus/minus UI
                        quantityDisplay.textContent = 0;
                        document.querySelector(`.Plusminus[data-product-id="${productId}"]`).style.display = "none";
                        document.querySelector(`.Original-add-tocart[data-product-id="${productId}"]`).style.display = "block";
                    }
                } else {
                    window.location.href = data.redirectUrl;
                }
            });
    }

document.addEventListener("DOMContentLoaded", function () {
    const signUpSwitch = document.querySelector(".switch-signup");
    const signInSwitch = document.querySelector(".switch-signin");
    const signInPartial = document.querySelector(".partial-Signin-Switch");
    const signUpPartial = document.querySelector(".partial-Signup-Switch");

    // Set initial active tab (e.g., Sign In active by default)
    signInSwitch.classList.add("active");
    signInPartial.classList.add("active");

    signUpSwitch.addEventListener("click", function () {
        // Switch to sign-up view
        signUpSwitch.classList.add("active");
        signInSwitch.classList.remove("active");
        signUpPartial.classList.add("active");
        signInPartial.classList.remove("active");
    });

    signInSwitch.addEventListener("click", function () {
        // Switch to sign-in view
        signInSwitch.classList.add("active");
        signUpSwitch.classList.remove("active");
        signInPartial.classList.add("active");
        signUpPartial.classList.remove("active");
    });
});

$(document).ready(function () {
    const password = $("#SignUp_Password");
    const confirmPassword = $("#SignUp_ConfirmPassword");
    const confirmPasswordError = $("#confirmPasswordError");

    // Validate form immediately on input
    confirmPassword.on("input", function () {
        if (confirmPassword.val() !== password.val()) {
            confirmPasswordError.text("Passwords do not match.");
        } else {
            confirmPasswordError.text("");
        }
    });

    // Use jQuery validation plugin to validate form
    $("form").validate({
        onkeyup: function (element) {
            $(element).valid();
        }
    });

    // Prevent form submission if passwords don't match
    $("form").on("submit", function (e) {
        if (confirmPassword.val() !== password.val()) {
            e.preventDefault();
            confirmPasswordError.text("Passwords do not match.");
        }
    });
});


// Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
// for details on configuring this project to bundle and minify static web assets.

// Write your JavaScript code.

function updateCookTimeMin() {
    const minValue = document.getElementById("cookTimeMin").value;
    document.getElementById("minCookTimeValue").textContent = minValue;
}

function updateCookTimeMax() {
    const maxValue = document.getElementById("cookTimeMax").value;
    document.getElementById("maxCookTimeValue").textContent = maxValue;
}

function updateMinPoints() {
    const minPointsValue = document.getElementById("minPoints").value;
    document.getElementById("minPointsValue").textContent = minPointsValue;
}

function updateMaxPoints() {
    const maxPointsValue = document.getElementById("maxPoints").value;
    document.getElementById("maxPointsValue").textContent = maxPointsValue;
}

// Event listeners for sliders to update displayed values
document.getElementById("cookTimeMin").addEventListener("input", updateCookTimeMin);
document.getElementById("cookTimeMax").addEventListener("input", updateCookTimeMax);
document.getElementById("minPoints").addEventListener("input", updateMinPoints);
document.getElementById("maxPoints").addEventListener("input", updateMaxPoints);

document.addEventListener("DOMContentLoaded", function () {
    const addToCartButtons = document.querySelectorAll(".Original-add-tocart .add-to-cart");
    const originalAddToCartDivs = document.querySelectorAll(".Original-add-tocart");
    const plusminusDivs = document.querySelectorAll(".Plusminus");

    // Show plusminus div and hide original add to cart div on add-to-cart click
    addToCartButtons.forEach(function (button, index) {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            originalAddToCartDivs[index].style.display = "none";
            plusminusDivs[index].style.display = "flex";
        });
    });
});

document.addEventListener('DOMContentLoaded', function () {
    // Handle Add to Cart button clicks for each card
    document.querySelectorAll('.add-to-cart-plus').forEach(function (button) {
        button.addEventListener('click', function () {
            const productId = this.dataset.productId;
            addToCart(productId, 1);
        });
    });

    // Handle Remove from Cart button clicks for each card
    document.querySelectorAll('.remove-from-cart').forEach(function (button) {
        button.addEventListener('click', function () {
            const productId = this.dataset.productId;
            removeFromCart(productId, 1);
        });
    });
});

// Function to add item to cart
function addToCart(productId, quantity) {
    fetch('/Cart/AddToCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams({
            productId: productId,
            quantity: quantity
        })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
                quantityDisplay.textContent = parseInt(quantityDisplay.textContent) + quantity;
            } else {
                window.location.href = data.redirectUrl;
            }
        });
}

// Function to remove item from cart
function removeFromCart(productId, quantity) {
    fetch('/Cart/RemoveFromCart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams({
            productId: productId,
            quantity: quantity
        })
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const quantityDisplay = document.getElementById(`quantity-display-${productId}`);
                const currentQuantity = parseInt(quantityDisplay.textContent);
                if (currentQuantity - quantity > 0) {
                    quantityDisplay.textContent = currentQuantity - quantity;
                } else {
                    // If quantity is 0 or less, hide or disable the plus/minus UI
                    quantityDisplay.textContent = 0;
                    document.querySelector(`.Plusminus[data-product-id="${productId}"]`).style.display = "none";
                    document.querySelector(`.Original-add-tocart[data-product-id="${productId}"]`).style.display = "block";
                }
            } else {
                window.location.href = data.redirectUrl;
            }
        });
}
document.addEventListener('DOMContentLoaded', function () {
    // Handle Add to Cart button clicks for original add to cart
    document.querySelectorAll('.add-to-cart-original').forEach(function (button) {
        button.addEventListener('click', function () {
            const productId = this.dataset.productId;
            addToCart(productId, 1);
            // Show the Plusminus div and hide the original add to cart div after adding
            const originalAddToCartDiv = this.closest('.Original-add-tocart');
            const plusminusDiv = originalAddToCartDiv.nextElementSibling;
            originalAddToCartDiv.style.display = "none";
            plusminusDiv.style.display = "flex";
        });
    });
});

// Function to show the recipe link on hover
function showRecipeLink(productId) {
    document.getElementById(`recipe-link-${productId}`).style.display = 'block';
}

// Function to hide the recipe link when not hovering
function hideRecipeLink(productId) {
    document.getElementById(`recipe-link-${productId}`).style.display = 'none';
}

document.addEventListener("DOMContentLoaded", function () {
    const monthSwitch = document.querySelector(".switch-Month");
    const yearSwitch = document.querySelector(".switch-Year");
    const monthPartial = document.querySelector(".partial-Month-Switch");
    const yearPartial = document.querySelector(".partial-Year-Switch");

    // Set initial active tab (Month active by default)
    monthSwitch.classList.add("active1");
    monthPartial.classList.add("active1");

    monthSwitch.addEventListener("click", function () {
        // Switch to month view
        monthSwitch.classList.add("active1");
        yearSwitch.classList.remove("active1");
        monthPartial.classList.add("active1");
        yearPartial.classList.remove("active1");
    });

    yearSwitch.addEventListener("click", function () {
        // Switch to year view
        yearSwitch.classList.add("active1");
        monthSwitch.classList.remove("active1");
        yearPartial.classList.add("active1");
        monthPartial.classList.remove("active1");
    });
});