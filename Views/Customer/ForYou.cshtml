@model ConvicartWebApp.PresentationLayer.ViewModels.ForYouPageViewModel
<div class="container centering mt-5">
    <div class="d-flex justify-content-center mb-4">
        <h2>For You, @Model.Customer.Name</h2>
    </div>

    @if (Model.VideoPosts != null && Model.VideoPosts.Any())
    {
        <div class="post-container d-flex flex-column align-items-center">
            @foreach (var video in Model.VideoPosts)
            {
                <div class="post-card shadow-sm mb-4">
                    

                    <!-- Video content -->
                    <div class="post-content">
                        <video controls class="w-100 rounded" style="height: auto; max-height: 400px; object-fit: cover;">
                            <source src="@video.VideoPath" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>

                    <!-- Post footer like file name or description -->
                    <div class="post-footer p-3 text-center">
                        <p class="file-name mb-0">@video.FileName</p>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination Links -->
        <div class="d-flex justify-content-center mt-4">
            @if (Model.TotalPages > 1)
            {
                <ul class="pagination">
                    <li class="page-item @(Model.PageIndex == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ForYou", "Customer", new { page = Model.PageIndex - 1 })">Previous</a>
                    </li>

                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(Model.PageIndex == i ? "active" : "")">
                            <a class="page-link" href="@Url.Action("ForYou", "Customer", new { page = i })">@i</a>
                        </li>
                    }

                    <li class="page-item @(Model.PageIndex == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("ForYou", "Customer", new { page = Model.PageIndex + 1 })">Next</a>
                    </li>
                </ul>
            }
        </div>
    }
    else
    {
        <p class="text-center">No videos uploaded yet.</p>
    }
</div>
<script>
    let isPaused = false;
    let currentChunkIndex = 0;

    // Show video preview
    function showVideoPreview(event) {
        const file = event.target.files[0];
        const videoPreview = document.getElementById("videoPreview");

        if (file) {
            const fileURL = URL.createObjectURL(file);
            videoPreview.src = fileURL;
            videoPreview.style.display = "block";
        }
    }

    async function startUpload() {
        isPaused = false;
        currentChunkIndex = localStorage.getItem("currentChunkIndex") || 0;
        document.getElementById("pauseButton").style.display = "inline";
        document.getElementById("resumeButton").style.display = "none";
        await uploadFile();
    }

    async function uploadFile() {
        const fileInput = document.getElementById('fileInput');
        const customerId = document.getElementById('customerId').value;
        const file = fileInput.files[0];
        const chunkSize = 2 * 1024 * 1024; // 2MB chunks
        const totalChunks = Math.ceil(file.size / chunkSize);

        const completionMessage = document.getElementById('completionMessage');
        completionMessage.style.display = 'none';

        const arcProgress = document.querySelector('.arc-progress');
        const arcBg = document.querySelector('.arc-bg'); // Select the background arc

        // Calculate the actual length of the arc path dynamically
        const arcLength = arcBg.getTotalLength();

        // Initialize progress
        arcProgress.style.strokeDasharray = arcLength;
        arcProgress.style.strokeDashoffset = arcLength; // Start from full offset (hidden)

        for (currentChunkIndex; currentChunkIndex < totalChunks; currentChunkIndex++) {
            if (isPaused) break;

            const start = currentChunkIndex * chunkSize;
            const end = start + chunkSize;
            const chunk = file.slice(start, end);

            try {
                await fetch("https://<azure-function-url>/api/upload-video?fileName=" +
                    encodeURIComponent(file.name) +
                    "&chunkIndex=" + currentChunkIndex +
                    "&totalChunks=" + totalChunks +
                    "&customerId=" + customerId, {
                        method: "POST",
                        body: chunk
                    });

                // Save progress in case of interruption
                localStorage.setItem("currentChunkIndex", currentChunkIndex + 1);

                // Update arc progress based on the calculated arc length
                const offset = arcLength - ((currentChunkIndex + 1) / totalChunks * arcLength);
                arcProgress.style.strokeDashoffset = offset;
            } catch (error) {
                console.error(`Error uploading chunk ${currentChunkIndex + 1}: ${error}`);
                alert(`Network error. Upload paused. Retrying when connection is restored...`);
                isPaused = true;
                return;
            }
        }

        if (currentChunkIndex === totalChunks) {
            localStorage.removeItem("currentChunkIndex");
            completionMessage.style.display = 'block';
            arcProgress.style.strokeDashoffset = 581.427; // Set to fully completed

            document.getElementById("pauseButton").style.display = "none";
            document.getElementById("resumeButton").style.display = "none";

            // Hide the video preview
            document.getElementById("videoPreview").style.display = "none";

            setTimeout(() => {
                fileInput.value = "";
                completionMessage.style.display = 'none';
            }, 3000);
        }
    }

    function pauseUpload() {
        isPaused = true;
        document.getElementById("pauseButton").style.display = "none";
        document.getElementById("resumeButton").style.display = "inline";
    }

    async function resumeUpload() {
        if (isPaused) {
            isPaused = false;
            document.getElementById("pauseButton").style.display = "inline";
            document.getElementById("resumeButton").style.display = "none";
            await uploadFile();
        }
    }
</script>

<style>
    .centering{
        align-items:center;
    }
    /* Container and card styling */
    .post-container {
        width: 100%;
        max-width: 600px;
    }

    .post-card {
        background-color: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow: hidden;
    }

    /* Header styling */
    .post-header {
        border-bottom: 1px solid #eee;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .user-name {
        font-weight: 600;
        color: #333;
    }

    /* Video and footer styling */
    .post-content {
        max-height: 400px;
        overflow: hidden;
    }

    .post-footer {
        font-size: 0.9rem;
        color: #555;
    }

    /* Pagination styling */
    .pagination {
        justify-content: center;
        font-size: 14px;
    }

        .pagination .page-link {
            color: #999;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
        }

        .pagination .page-item.disabled .page-link {
            color: #ccc;
        }

        .pagination .page-link:hover {
            background-color: #007bff;
            color: white;
        }

        .pagination .active .page-link {
            background-color: #007bff;
            color: white;
        }
</style>
