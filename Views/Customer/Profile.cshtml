@model ConvicartWebApp.PresentationLayer.ViewModels.CustomerProfileViewModel

<div class="custom-container rounded bg-white mt-5 mb-5">
    <div class="row">
        <div class="col-md-3 border-right">

            <div class="d-flex-1 flex-column align-items-center text-center p-3 py-5">

                <img src="@Url.Action("GetProfileImage", "Customer", new { id = Model.Customer.CustomerId })"
                      alt="Profile Image" />
                      <br />

                <a asp-controller="Customer" asp-action="UploadProfileImage" class="btn btn-primary profile-button">Upload Image</a>

                <span class="text-black" style="font-size:20px; font-weight:500;">Subscription: @Model.Customer?.Subscription</span>
                <div class="Point-balencediv">
                    <h3 class="text-center-h3" style="margin-top:20px; padding:0px;width:260px; margin-left:40px; margin-right:auto">Points Balance</h3>
                    <a asp-action="DisplayPurchaseForm" asp-controller="Points" class="btn-primary mb-3 profile-button" style="font-size: 0.85rem;padding: 0.2rem 0.7rem;text-decoration: none;text-align: center; border-radius: 5px; width: max-content; margin-left: auto;margin-right:auto; margin-top: 10px;">Purchase more points</a>
                    <h3 class="balence-points" style="padding:0px; margin-left:auto;margin-right:auto">@Model.Customer?.PointBalance</h3>
                </div>
                <br />
                <a asp-action="ChangePassword" class="btn btn-primary profile-button" style="font-size: 0.85rem;padding: 0.2rem 0.7rem;text-decoration: none;text-align: center; border-radius: 5px; width: max-content; margin-left: auto;margin-right:auto; margin-top: 10px;">Change Password</a>

            </div>
        </div>

        <div class="col-md-5 border-right">

            <div class="p-3 py-5">
                <h3 class="text-center">Profile</h3>

                <div class="inrow mt-3">

                    <div class="col-md-6">
                        <p>Name</p> 
                        <h5>@Model.Customer?.Name</h5>
                    </div>

                    <div class="col-md-6">
                        <p>Mobile Number</p>
                        <h5>@Model.Customer?.Number</h5>
                    </div>

                </div>

                <div class="inrow mt-3">
                    <div class="col-md-12">
                        <p>Email</p>
                        <h5>@Model.Customer?.Email</h5>
                    </div>
                </div>

                <div class="inrow mt-3">
                    <div class="col-md-6">
                        <p>Age</p>
                        <h5>@Model.Customer?.Age</h5>
                    </div>

                    <div class="col-md-6">
                        <p>Gender</p>
                        <h5>@Model.Customer?.Gender</h5>
                    </div>

                </div>

                <div class="mt-5 text-center">
                     <a asp-controller="Customer" asp-action="EditProfile" class="btn btn-primary profile-button">Update Profile</a>
                </div>

            </div>

        </div>

        <div class="col-md-4">

            <div class="address-p-3 py-5">
                <h3 class="text-center-h3">Address</h3>
                <a asp-controller="Address" asp-action="CreateOrUpdateAddress" class="btn-add btn-primary mb-3 profile-button">Add/Update Address</a>

                <ul class="list-unstyled">
                    <li>Street: @Model.Address?.StreetAddress</li>
                    <li>City: @Model.Address?.City</li>
                    <li>State: @Model.Address?.State</li>
                    <li>Country: @Model.Address?.Country</li>
                    <li>Postal Code: @Model.Address?.PostalCode</li>
                </ul>

                
            </div>

        </div>
    </div>

    <div class="row-2 mt-5">

        <div class="col-md-12-2">
            <h4 class="text-center" style="color: silver;">Selected Preferences</h4>
            <a asp-controller="Customer" asp-action="UpdatePreference" class="btn-sle-pre btn-primary profile-button">Add/Update Preferences</a>

            <div class="mt-3-pref">

                @if (Model.CustomerPreferences != null && Model.CustomerPreferences.Any())
                {
                    <ul class="d-flex flex-row justify-content-evenly list-unstyled">
                        @foreach (var cp in Model.CustomerPreferences)
                        {
                            <li class="p-3 bg-light rounded">@cp.Preference?.PreferenceName</li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-center">No preferences selected.</p>
                }
            </div>
        </div>
    </div>
    <div class="row-2 mt-5 col-md-12-2">
        <div class="video-upload-container text-center">
            <h4>Post videos of yourself cooking.</h4>
            <h5>People with similar preferences can view your videos on their For-You page.</h5>
            <p>Your name and details will remain anonymous.</p>

            <!-- Hidden input for customer ID -->
            <input type="hidden" id="customerId" value="@Model.Customer?.CustomerId" />

            <!-- Video Preview -->
            <video id="videoPreview" controls style="display: none; width: 200px; height: auto; margin: 0 auto; border-radius: 10px;"></video>

            <!-- Arc-shaped progress bar -->
            <div class="video-upload-container">
                <div class="arc-container">
                    <svg class="arc-svg" width="400" height="400" viewBox="0 0 400 400">
                        <!-- Background Arc -->
                        <path class="arc-bg" d="M 60 260 A 150 150 0 1 1 340 260" />
                        <!-- Foreground Arc (progress) -->
                        <path class="arc-progress" d="M 60 260 A 150 150 0 1 1 340 260" />
                    </svg>

                    <!-- Upload Controls -->
                    <div class="upload-controls">
                        <input type="file" id="fileInput" accept="video/*" onchange="showVideoPreview(event)" />
                        <button onclick="startUpload()">Upload</button>
                        <button id="pauseButton" style="display: none;" onclick="pauseUpload()">Pause</button>
                        <button id="resumeButton" style="display: none;" onclick="resumeUpload()">Resume</button>
                    </div>

                    <!-- Completion Message -->
                    <span id="completionMessage" style="display: none;">Upload complete!</span>
                </div>
            </div>
        </div>
    </div>
    <script>
        let isPaused = false;
        let currentChunkIndex = 0;

        // Show video preview
        function showVideoPreview(event) {
            const file = event.target.files[0];
            const videoPreview = document.getElementById("videoPreview");

            if (file) {
                const fileURL = URL.createObjectURL(file);
                videoPreview.src = fileURL;
                videoPreview.style.display = "block";
            }
        }

        async function startUpload() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (!file) {
                alert("Please select a video file to upload.");
                return;
            }

            isPaused = false;
            currentChunkIndex = localStorage.getItem("currentChunkIndex") || 0;
            document.getElementById("pauseButton").style.display = "inline";
            document.getElementById("resumeButton").style.display = "none";
            await uploadFile();
        }

        async function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const customerId = document.getElementById('customerId').value;
            const file = fileInput.files[0];
            const chunkSize = 2 * 1024 * 1024;
            const totalChunks = Math.ceil(file.size / chunkSize);

            const completionMessage = document.getElementById('completionMessage');
            completionMessage.style.display = 'none';

            const arcProgress = document.querySelector('.arc-progress');
            const arcBg = document.querySelector('.arc-bg');
            const arcLength = arcBg.getTotalLength();

            arcProgress.style.strokeDasharray = arcLength;
            arcProgress.style.strokeDashoffset = arcLength;

            for (currentChunkIndex; currentChunkIndex < totalChunks; currentChunkIndex++) {
                if (isPaused) break;

                const start = currentChunkIndex * chunkSize;
                const end = start + chunkSize;
                const chunk = file.slice(start, end);

                const formData = new FormData();
                formData.append("file", chunk);
                formData.append("fileName", file.name);
                formData.append("chunkIndex", currentChunkIndex);
                formData.append("totalChunks", totalChunks);
                formData.append("customerId", customerId);

                try {
                    const response = await fetch("/Customer/UploadChunk", {
                        method: "POST",
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
                    }

                    localStorage.setItem("currentChunkIndex", currentChunkIndex + 1);

                    const offset = arcLength - ((currentChunkIndex + 1) / totalChunks * arcLength);
                    arcProgress.style.strokeDashoffset = offset;
                } catch (error) {
                    console.error(`Error uploading chunk ${currentChunkIndex + 1}: ${error.message}`);
                    alert("An error occurred. Upload paused. Please check your connection or try again.");
                    isPaused = true;
                    return;
                }
            }

            if (currentChunkIndex === totalChunks) {
                localStorage.removeItem("currentChunkIndex");
                completionMessage.style.display = 'block';

                document.getElementById("pauseButton").style.display = "none";
                document.getElementById("resumeButton").style.display = "none";

                document.getElementById("videoPreview").style.display = "none";

                setTimeout(() => {
                    fileInput.value = "";
                    completionMessage.style.display = 'none';
                }, 3000);
            }
        }

        function pauseUpload() {
            isPaused = true;
            document.getElementById("pauseButton").style.display = "none";
            document.getElementById("resumeButton").style.display = "inline";
            alert("Upload paused. Click 'Resume' to continue.");
        }

        async function resumeUpload() {
            if (isPaused) {
                isPaused = false;
                document.getElementById("pauseButton").style.display = "inline";
                document.getElementById("resumeButton").style.display = "none";
                alert("Upload resumed.");
                await uploadFile();
            }
        }
    </script>

<style>
    img{
        width :140px;
height:140px;
        border-radius:100%;

    }
    h5{
        margin-bottom:20px;
    }
    .custom-container {
        width: 75%;
        margin: 0 auto; /* Center the container */
    }

        .custom-container > div {
            transform: scale(0.9); /* Scale down the contents */
            transform-origin: top; /* Ensure scaling starts from the top */
        }

    .btn {
        font-size: 0.85rem; /* Slightly reduce button size */
        padding: 0.5rem 1rem; /* Adjust padding for buttons */
    }

    body {
        background: rgb(99, 39, 120);
    }

    .profile-button {
        background: rgb(99, 39, 120);
        box-shadow: none;
        border: none;
    }

        .profile-button:hover {
            background: #682773;
        }

        .profile-button:focus {
            background: #682773;
            box-shadow: none;
        }

        .profile-button:active {
            background: #682773;
            box-shadow: none;
        }

    .labels {
        font-size: 11px;
    }

    .add-experience:hover {
        background: #BA68C8;
        color: #fff;
        cursor: pointer;
        border: solid 1px #BA68C8;
    }

        .video-upload-container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .arc-container {
            width: 350px;
            height: 350px;
            margin: 0 auto;
            position: relative;
        }

        .arc-svg {
            width: 100%;
            height: 100%;
        }

        /* Arc Styles */
        .arc-bg {
            fill: none;
            stroke: #e0e0e0;
            stroke-width: 15;
        }

        .arc-progress {
            fill: none;
            stroke: #F3BE57;
            stroke-width: 15;
            stroke-dasharray: 565; /* Approximate length of the arc */
            stroke-dashoffset: 565; /* Starting with full offset (hidden) */
            transition: stroke-dashoffset 0.3s ease;
        }

        .upload-controls {
            position: absolute;
            top: 140px; /* Adjust as needed */
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: column;
            align-items: center;
        }


            .upload-controls input,
            .upload-controls button {
                margin: 5px 0;
                width: 100px;
                text-align: center;
            }

        button {
            padding: 5px 10px;
            font-size: 0.9rem;
        }

        #completionMessage {
            position: absolute;
            bottom: 70px;
            width: 100%;
            text-align: center;
            color: green;
            font-weight: bold;
        }
</style>
